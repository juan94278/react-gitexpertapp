{"version":3,"sources":["components/AddCategoria.js","helpers/getGifs.js","components/GifGridItem.js","components/GitGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategoria","props","setCategorias","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","categoria","a","url","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GitGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","GitExpertApp","categorias","cat","i","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAe,SAAEC,GAE1B,IAAQC,EAAkBD,EAAlBC,cAGR,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAiBA,OAEI,sBAAMC,SAbW,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAQlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SArBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCXlBG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAWH,GAF/C,+DAGKI,MAAOF,GAHZ,cAGbG,EAHa,gBAIIA,EAAUC,OAJd,uBAIXC,EAJW,EAIXA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAYZM,GAZY,4CAAH,sDCEPO,EAAc,SAAE/B,GAEzB,IAAQ4B,EAAe5B,EAAf4B,MAAOV,EAAQlB,EAARkB,IAEf,OACI,sBAAKc,UAAU,2DAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAMN,IACrB,4BAAKA,QCLJO,EAAU,SAAC,GAAmB,IAAjBnB,EAAgB,EAAhBA,UAEtB,ECHwB,SAAEA,GAC1B,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAqBA,OAhBAC,qBAAW,WAKPxB,EAASC,GAAYwB,MAAK,SAAAC,GACtBC,YAAW,WACPJ,EAAS,CACLf,KAAMkB,EACNL,SAAS,MAEd,UAGR,CAAEpB,IAEEqB,EDnB2BM,CAAc3B,GAAlCa,EAAd,EAAQN,KAAca,EAAtB,EAAsBA,QAEtB,OACI,qCACI,oBAAIJ,UAAU,kBAAd,SACKhB,IAEHoB,GAAW,mBAAGJ,UAAU,iBAAb,yBACb,qBAAKA,UAAU,YAAf,SACI,6BAEQH,EAAOJ,KAAK,SAAAC,GAAG,OAAI,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,eEblD,SAASiB,IAEpB,MAAoC1C,mBAAS,CAAC,WAA9C,mBAAO2C,EAAP,KAAmB5C,EAAnB,KAEA,OACI,qCACI,8CACA,cAAC,EAAD,CAAcA,cAAgBA,IAC9B,uBACA,6BAEQ4C,EAAWpB,KAAK,SAACqB,EAAKC,GAAN,OAAY,cAAC,EAAD,CAAiB/B,UAAY8B,GAAfC,W,MCV9DC,IAASC,OACL,cAACL,EAAD,IACFM,SAASC,eAAe,W","file":"static/js/main.8ccc79ba.chunk.js","sourcesContent":["import React, {useState} from 'react'\nimport PropTypes from 'prop-types'\n\nexport const AddCategoria = ( props ) => {\n\n    const { setCategorias } = props;\n\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value)\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if(inputValue.trim().length > 2){\n            setCategorias(cats => [inputValue, ...cats]);\n            setInputValue('');\n        }\n\n        \n    }\n\n    return (\n        \n        <form onSubmit={handleSubmit}>\n            <input \n                type=\"text\"\n                value={inputValue}\n                onChange={ handleInputChange }/>\n        </form>\n        \n    )\n}\n\n\nAddCategoria.propTypes = {\n    setCategorias: PropTypes.func.isRequired\n}","export const getGifs = async ( categoria ) => {\n    \n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( categoria ) }&limit=50&api_key=7P4wp4KDe44hU3mzaTycF5lIsEZzb4YI`;\n    const respuesta = await fetch( url );\n    const { data } = await respuesta.json();\n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    });\n    return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ( props ) => {\n    \n    const { title, url } = props;\n\n    return (\n        <div className=\"card animate__animated animate__bounce animate__delay-2s\">\n            <img src={url} alt={ title } />\n            <p>{ title }</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GitGrid = ({ categoria }) => {\n\n    const { data: images, loading } = useFetchGifs( categoria );\n\n    return (\n        <>\n            <h3 className=\"animate__fadeIn\">\n                {categoria}\n            </h3>\n            { loading && <p className=\"animate__flash\">Cargando...</p> }\n            <div className=\"card-grid\">\n                <ol>\n                    {\n                        images.map( img => <GifGridItem key={img.id} {...img} />)\n                    }\n                </ol>\n            </div>\n        </>\n    )\n}\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = ( categoria ) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect( () => {\n        // setState({\n        //     data: [],\n        //     loading: true\n        // });\n        getGifs( categoria ).then(imgs => {\n            setTimeout(() => {\n                setState({\n                    data: imgs,\n                    loading: false\n                })\n            }, 3000);\n            \n        });\n    }, [ categoria ]);\n\n    return state;\n}","import React, { useState } from 'react';\nimport { AddCategoria } from './components/AddCategoria';\nimport { GitGrid } from './components/GitGrid';\n\nexport default function GitExpertApp () {\n\n    const [categorias, setCategorias] = useState(['Naruto']);\n\n    return (\n        <>\n            <h2>GitExpertApp</h2>\n            <AddCategoria setCategorias={ setCategorias } />\n            <hr/>\n            <ol>\n                {\n                    categorias.map( (cat, i) => <GitGrid key={i} categoria={ cat }/>)\n                }\n            </ol>\n        </>\n    )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GitExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GitExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}